export type PixelData = {
  width: number;
  height: number;
  data: Uint8ClampedArray;
};

export function encryptImage(
  ctx: CanvasRenderingContext2D,
  canvas: HTMLCanvasElement,
  key: number
): void {
  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  const data = imageData.data;

  // Process each pixel (RGBA values)
  for (let i = 0; i < data.length; i += 4) {
    // Encrypt RGB values (skip alpha)
    data[i] = data[i] ^ key; // Red
    data[i + 1] = data[i + 1] ^ key; // Green
    data[i + 2] = data[i + 2] ^ key; // Blue
  }

  ctx.putImageData(imageData, 0, 0);
}

export function decryptImage(
  ctx: CanvasRenderingContext2D,
  canvas: HTMLCanvasElement,
  key: number
): void {
  // XOR operation is reversible, so we use the same function
  encryptImage(ctx, canvas, key);
}

export function getImageData(file: File): Promise<HTMLImageElement> {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.crossOrigin = "anonymous";
    img.src = URL.createObjectURL(file);
  });
}

