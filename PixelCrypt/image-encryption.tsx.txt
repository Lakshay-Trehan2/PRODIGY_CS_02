'use client'

import { useState, ChangeEvent } from 'react'
import { Upload, Lock, Unlock, RotateCw, Sun, Moon, Zap } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Label } from '@/components/ui/label'
import { Slider } from '@/components/ui/slider'
import { useImageEncryption } from './hooks/useImageEncryption'
import { Header } from './components/header'
import { Footer } from './components/footer'
import { WelcomePage } from './components/welcome-page'
import { useTheme } from 'next-themes'

export default function ImageEncryption() {
  const [showWelcome, setShowWelcome] = useState(true)
  const {
    originalImage,
    processedImage,
    isEncrypted,
    canvasRef,
    key,
    setKey,
    rotation,
    handleImageUpload,
    handleEncrypt,
    handleDecrypt,
    handleRotate,
  } = useImageEncryption()

  const { theme, setTheme } = useTheme()
  const [glowIntensity, setGlowIntensity] = useState(0)

  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      handleImageUpload(file)
    }
  }

  return (
    <div className="min-h-screen flex flex-col relative overflow-hidden bg-gradient-to-br from-purple-900 to-indigo-900">
      {/* Background pattern */}
      <div className="absolute inset-0 bg-[url('/circuit-pattern.svg')] opacity-5"></div>

      {/* Welcome Page */}
      {showWelcome && <WelcomePage onEnter={() => setShowWelcome(false)} />}

      {/* Main Content */}
      <div className="relative z-10 flex flex-col min-h-screen">
        <Header />
        
        <main className="flex-1 py-8">
          <div className="container mx-auto px-4">
            <Card className="mb-8 bg-purple-800 bg-opacity-20 backdrop-blur-sm border-purple-600">
              <CardHeader>
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle className="text-purple-100">Image Encryption Dashboard</CardTitle>
                    <CardDescription className="text-purple-200">
                      Upload an image, encrypt it, and apply transformations.
                    </CardDescription>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
                  >
                    {theme === 'light' ? <Moon className="h-5 w-5" /> : <Sun className="h-5 w-5" />}
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid gap-6">
                  <div className="grid gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="image-upload" className="text-purple-100">Upload Image</Label>
                      <div className="flex items-center gap-4">
                        <Input
                          id="image-upload"
                          type="file"
                          accept="image/*"
                          onChange={handleFileChange}
                          className="bg-purple-700 bg-opacity-50 border-purple-500 text-purple-100"
                        />
                        <Upload className="h-5 w-5 text-purple-300" />
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="encryption-key" className="text-purple-100">Encryption Key</Label>
                      <Input
                        id="encryption-key"
                        type="number"
                        value={key}
                        onChange={(e) => setKey(Number(e.target.value))}
                        placeholder="Enter a number as your encryption key"
                        className="bg-purple-700 bg-opacity-50 border-purple-500 text-purple-100"
                      />
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-4">
                    <Button
                      onClick={handleEncrypt}
                      disabled={!originalImage || isEncrypted}
                      className="bg-purple-600 hover:bg-purple-700 text-white"
                    >
                      <Lock className="h-4 w-4 mr-2" />
                      Encrypt Image
                    </Button>
                    <Button
                      onClick={handleDecrypt}
                      disabled={!originalImage || !isEncrypted}
                      variant="secondary"
                      className="bg-indigo-600 hover:bg-indigo-700 text-white"
                    >
                      <Unlock className="h-4 w-4 mr-2" />
                      Decrypt Image
                    </Button>
                    <Button
                      onClick={handleRotate}
                      disabled={!processedImage}
                      variant="outline"
                      className="border-purple-400 text-purple-100 hover:bg-purple-700"
                    >
                      <RotateCw className="h-4 w-4 mr-2" />
                      Rotate Image
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="grid md:grid-cols-2 gap-8">
              <Card className="bg-purple-800 bg-opacity-20 backdrop-blur-sm border-purple-600">
                <CardHeader>
                  <CardTitle className="text-purple-100">Original Image</CardTitle>
                  <CardDescription className="text-purple-200">Your uploaded image before encryption</CardDescription>
                </CardHeader>
                <CardContent>
                  {originalImage ? (
                    <img
                      src={originalImage}
                      alt="Original"
                      className="w-full h-auto rounded-lg border border-purple-500"
                    />
                  ) : (
                    <div className="aspect-video bg-purple-700 bg-opacity-30 rounded-lg flex items-center justify-center">
                      <p className="text-purple-300">No image uploaded</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card className="bg-purple-800 bg-opacity-20 backdrop-blur-sm border-purple-600">
                <CardHeader>
                  <CardTitle className="text-purple-100">{isEncrypted ? 'Encrypted Image' : 'Processed Image'}</CardTitle>
                  <CardDescription className="text-purple-200">
                    {isEncrypted 
                      ? 'Your image after encryption' 
                      : 'Your image after processing'}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {processedImage ? (
                    <div className="relative">
                      <img
                        src={processedImage}
                        alt="Processed"
                        className="w-full h-auto rounded-lg border border-purple-500"
                        style={{ 
                          transform: `rotate(${rotation}deg)`,
                          filter: `drop-shadow(0 0 ${glowIntensity}px #8b5cf6)`
                        }}
                      />
                      <div className="mt-4 space-y-2">
                        <Label htmlFor="glow-intensity" className="text-purple-100 flex items-center">
                          <Zap className="h-4 w-4 mr-2" />
                          Glow Intensity
                        </Label>
                        <Slider
                          id="glow-intensity"
                          min={0}
                          max={20}
                          step={1}
                          value={[glowIntensity]}
                          onValueChange={(value) => setGlowIntensity(value[0])}
                          className="w-full"
                        />
                      </div>
                    </div>
                  ) : (
                    <div className="aspect-video bg-purple-700 bg-opacity-30 rounded-lg flex items-center justify-center">
                      <p className="text-purple-300">No processed image</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
        </main>

        <canvas
          ref={canvasRef}
          className="hidden"
          aria-hidden="true"
        />
        
        <Footer />
      </div>
    </div>
  )
}

